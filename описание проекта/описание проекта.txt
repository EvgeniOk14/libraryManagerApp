Добрый день.

Высылаю Вам своё задание:

https://github.com/EvgeniOk14/libraryManagerApp   <---  это ссылка на мой проект "Управление библиотекой"

Данный проект состоит из двух независимых частей:

1) Бекенд, написан на языке Java. 
   В проекте использовалась:
   1) JDK версии 21 и сборщик проекта Maven
   2) Spring Boot
   3) база данных PostgreSQL
   4) REST API для передачи данных с бекенда на фронтенд
   5) web-socket для дублирования части данных с бекенда на фронтенд
   6) CRON-планировщик, для отправки уведомлений пользователю о просрочке на email(использовал Spring Scheduling для настройки CRON-задач)
   7) CORS (Cross-Origin Resource Sharing) для разрешения передачи и приёма данных с фронтенда
   8) кастомные исключения, которые обрабатываються на глобальном уровне (Кастомные исключения, обработанные с помощью @ControllerAdvice и @ExceptionHandler)
   9) связанные между собой таблицы в базе данных (связи прописаны в анотациях @OneToMany, @ManyToOne и т.д.)
   10) ООП и принципы солид (абстрактные класс AbstractItem и иерархия наследников от него, разделение классов на сервисы, репозитории, контроллеры, конфиги прочее). Проект следует принципам SOLID для повышения гибкости и поддерживаемости кода. 
   11) дженерики (работа с обобщениями класс LibraryItem<?>. Способствует более безопасной типизации данных.
   12) Hibernate (Hibernate ORM для взаимодействия с базой данных через аннотации JPA)
   13) валидация полей (использование аннотаций валидации, таких как @Valid и @NotNull)
   14) applicacion.yml файл, для описания основных настроек проиложения (Файл application.yml для конфигурации настроек приложения, включая базу данных, порты, CORS и прочее)
   15) работа с JsonObject и библиотекой Gson:
       а) Передача JSON-строки (тип данных: String json) с фронтенда на сервер через HTTP-запрос через различные методы           (POST и т.д.)
       б) Десериализация JSON-строки на сервере в объект типа JsonObject с использованием библиотеки Gson 
       в) Преобразование JsonObject в соответствующие экземпляры классов для дальнейшей обработки
   16) Применение Stream API при разработке различных методов 
          

   https://github.com/EvgeniOk14/libraryManagerApp/tree/main/beckendLibraryMeneger  <--- ссылка на часть бекенд


2) фронтенд, написан на языке JavaScript с использованием библиотеки React
   1) используем vite - инструмент для сборки и разработки используемый в React (обеспечивает очень быстрое время старта разработки за счет использования модульной системы ES (ESM), поддерживаемой браузерами)
   2) использование встроенных хуков библиотеки React
   3) создание кастомных хуков
   4) использование useEffect (useEffect в React — это хук, который выполняет побочные эффекты в компонентах. Он запускается после рендеринга и может управлять подписками, запросами или обновлением данных, а также для синхронизации компонентов с внешними данными или состоянием.)
   5) стилизованное меню для пользователя
   6) вывод уведомлений как во всплывающих окнах, так и в окно под формой (уведомления появляются в реальном времени)
   7) стилизация файлов css идёт от глобального файла global.css, остальные стили импортируються в данный файл (удобство чтения стилей, это делает проект более поддерживаемым и масштабируемым).
   8) задание классов каждому компонету страницы, в зависимоти от его иерархии (к примеру форма, главный компонет, а элементам формы задаютьс классы с названием главного компонета и зерез дефис или нижнее подчёркивание происыаватся имя элемента, видно что элемент принадлежит форме, это сделано для удобства читаемости элементов и правильной их стилизации)
  9) задание ссылкам и кнопкам интерактивности (при наведении на элемент он двигаеться, измененяет цвет, так же это справидливо при нажатие на элемент)
 10) реализовано получение данных с фронтенда (через REST API и web-socket)
 11) реализован выбор работы с предметом (Книга, DVD и прочие)
 
 https://github.com/EvgeniOk14/libraryManagerApp/tree/main/frontend   <--- ссылка на фронтенд 


С уважением Евгений.


